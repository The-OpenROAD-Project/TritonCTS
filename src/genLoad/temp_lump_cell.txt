  cell(load_FF__IDX_) { 
    cell_footprint : "XXX_XXX";
    area : X.XXXXX;
    pg_pin (XXX) {
      pg_type : primary_power;
      related_bias_pin : "XXX";
      voltage_name : "XXX";
    }
    pg_pin (XXX) {
      pg_type : nwell;
      physical_connection : device_layer;
      voltage_name : "XXX";
    }
    pg_pin (XXX) {
      pg_type : pwell;
      physical_connection : device_layer;
      voltage_name : "XXX";
    }
    pg_pin (XXX) {
      pg_type : primary_ground;
      related_bias_pin : "XXX";
      voltage_name : "XXX";
    }
    leakage_power () {
      value : XXXX.XX;
      when : "XXX&D";
      related_pg_pin : XXX;
    }
    leakage_power () {
      value : XXX.XXX;
      when : "XXX&D";
      related_pg_pin : XXX;
    }
    leakage_power () {
      value : XXXX.XX;
      when : "XXX&!D";
      related_pg_pin : XXX;
    }
    leakage_power () {
      value : XXX.XXX;
      when : "XXX&!D";
      related_pg_pin : XXX;
    }
    leakage_power () {
      value : XXXX.XX;
      when : "!XXX&D";
      related_pg_pin : XXX;
    }
    leakage_power () {
      value : XXX.XXX;
      when : "!XXX&D";
      related_pg_pin : XXX;
    }
    leakage_power () {
      value : XXXX.XX;
      when : "!XXX&!D";
      related_pg_pin : XXX;
    }
    leakage_power () {
      value : XXX.XXX;
      when : "!XXX&!D";
      related_pg_pin : XXX;
    }
    leakage_power () {
      value : XXXX.XX;
      related_pg_pin : XXX;
    }
    leakage_power () {
      value : XXX.XXX;
      related_pg_pin : XXX;
    }
    pin (XXX) {
      direction : "input";
      related_power_pin : "XXX";
      related_ground_pin : "XXX";
      clock : "true";
     
      input_signal_level : XXXX;
      related_bias_pin : "XXX XXX";
      max_transition : XXX.XXX;
      capacitance : X.XXXXXX;
      rise_capacitance : X.XXXXXX;
      fall_capacitance : X.XXXXXX;
      input_voltage : default_XXX_XXX_input;
      timing () {
        related_pin : "XXX";
        sdf_cond : "ENABLE_D == X'bX";
        timing_type : min_pulse_width;
        when : "X";
        rise_constraint (XXX_template) {
          index_X ("X.XXXXX, XX.XXXX, XXX.XX, XXX.XXX");
          values ( \
            "XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX" \
          );
        }
        fall_constraint (XXX_template) {
          index_X ("X.XXXXX, XX.XXXX, XXX.XX, XXX.XXX");
          values ( \
            "XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX" \
          );
        }
      }
      timing () {
        related_pin : "XX";
        sdf_cond : "XXXXX == X'bX";
        timing_type : min_pulse_width;
        when : "!D";
        rise_constraint (mpw_template) {
          index_X ("X.XXXXX, XX.XXXX, XXX.XX, XXX.XXX");
          values ( \
            "XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX" \
          );
        }
        fall_constraint (mpw_template) {
          index_X ("X.XXXXX, XX.XXXX, XXX.XX, XXX.XXX");
          values ( \
            "XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX" \
          );
        }
      }
      internal_power () {
        when : "X&X";
        related_pg_pin : XXX;
        rise_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXX, X.XXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXX, X.XXXXX" \
          );
        }
        fall_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX" \
          );
        }
      }
      internal_power () {
        when : "X&X";
        related_pg_pin : XXX;
        rise_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          values ( \
            "-X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX" \
          );
        }
        fall_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXX, X.XXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX" \
          );
        }
      }
      internal_power () {
        when : "X&!X";
        related_pg_pin : XXX;
        rise_power (scalar) {
          values ( \
            "X" \
          );
        }
        fall_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXX, X.XXXXX, X.XXXXX" \
          );
        }
      }
      internal_power () {
        when : "X&!X";
        related_pg_pin : XXX;
        rise_power (scalar) {
          values ( \
            "X" \
          );
        }
        fall_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX" \
          );
        }
      }
      internal_power () {
        when : "!X&X";
        related_pg_pin : XXX;
        rise_power (scalar) {
          values ( \
            "X" \
          );
        }
        fall_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXX" \
          );
        }
      }
      internal_power () {
        when : "!X&X";
        related_pg_pin : XXX;
        rise_power (scalar) {
          values ( \
            "X" \
          );
        }
        fall_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX" \
          );
        }
      }
      internal_power () {
        when : "!X&!X";
        related_pg_pin : XXX;
        rise_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX" \
          );
        }
        fall_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXX, X.XXXXX, X.XXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX" \
          );
        }
      }
      internal_power () {
        when : "!X&!X";
        related_pg_pin : XXX;
        rise_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          values ( \
            "-X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX" \
          );
        }
        fall_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXX" \
          );
        }
      }
    }
    pin (D) {
      direction : "input";
      related_power_pin : "XXX";
      related_ground_pin : "XXX";
      nextstate_type : "data";
      input_signal_level : XXX;
      related_bias_pin : "XXX XXX";
      max_transition : XXX.XXX;
      capacitance : _CAP_;
      rise_capacitance : _CAP_;
      fall_capacitance : _CAP_;
      input_voltage : default_XXX_XXX_input;
      timing () {
        related_pin : "XXX";
        timing_type : hold_rising;
        rise_constraint (constraint_template) {
          index_X ("X.XXXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          index_X ("X.XXXXX, XX.XXXX, XXX.XX, XXX.XXX");
          values ( \
            "-X.XXXXX, X.XXXXXX, X.XXXXX, X.XXXXX", \
            "-XX.XXXX, -XX.XXXX, -XX.XXXX, -XX.XXXX", \
            "-XX.XXXX, -XX.XXXX, -XX.XXXX, -XX.XXXX", \
            "-XX.XXXX, -XX.XXXX, -XX.XXXX, -XX.XXXX" \
          );
        }
        fall_constraint (constraint_template) {
          index_X ("X.XXXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          index_X ("X.XXXXX, XX.XXXX, XXX.XX, XXX.XXX");
          values ( \
            "X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX", \
            "-XX.XXXX, -X.XXXX, X.XXXXX, XX.XXXX", \
            "-XX.XXXX, -XX.XXXX, -X.XXXXX, X.XXXXX", \
            "-XX.XXXX, -XX.XXXX, -XX.XXXX, -X.XXXXXX" \
          );
        }
      }
      timing () {
        related_pin : "XXX";
        timing_type : setup_rising;
        rise_constraint (constraint_template) {
          index_X ("X.XXXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          index_X ("X.XXXXX, XX.XXXX, XXX.XX, XXX.XXX");
          values ( \
            "XX.XXXX, X.XXXXX, -X.XXXXXX, -X.XXXXX", \
            "XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX", \
            "XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX", \
            "XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX" \
          );
        }
        fall_constraint (constraint_template) {
          index_X ("X.XXXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          index_X ("X.XXXXX, XX.XXXX, XXX.XX, XXX.XXX");
          values ( \
            "X.XXXXX, -X.XXXXX, -XX.XXXX, -XX.XXXX", \
            "XX.XXXX, XX.XXXX, X.XXXXX, -X.XXXXX", \
            "XX.XXXX, XX.XXXX, XX.XXXX, X.XXXXX", \
            "XX.XXX, XX.XXXX, XX.XXXX, XX.XXXX" \
          );
        }
      }
      internal_power () {
        when : "XX&X";
        related_pg_pin : XXXX;
        rise_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "-X.XXXXXX, -X.XXXXXX, -X.XXXXXX, -X.XXXXXX, -X.XXXXXX, -X.XXXXXX, -X.XXXXX, -X.XXXXXX" \
          );
        }
        fall_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXXX, X.XXXXXX, X.XXXXXX, X.XXXXXX, X.XXXXXX, X.XXXXXX, X.XXXXXX, X.XXXXXX" \
          );
        }
      }
      internal_power () {
        when : "XXX&X";
        related_pg_pin : XXX;
        rise_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "-X.XXXXXXXX, -X.XXXXXXXX, -X.XXXXXXXX, -X.XXXXXXXX, -X.XXXXXXX, -X.XXXXXXXX, -X.XXXXXXXX, -X.XXXXXXX" \
          );
        }
        fall_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXXXXX, X.XXXXXXXX, X.XXXXXXXX, X.XXXXXXXX, X.XXXXXXXX, X.XXXXXXX, X.XXXXXXXX, X.XXXXXXXX" \
          );
        }
      }
      internal_power () {
        when : "XXX&!X";
        related_pg_pin :XXX;
        rise_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "-X.XXXXXX, -X.XXXXX, -X.XXXXXX, -X.XXXXXX, -X.XXXXXX, -X.XXXXXX, -X.XXXXXX, -X.XXXXX" \
          );
        }
        fall_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXXX, X.XXXXXX, X.XXXXXX, X.XXXXXX, X.XXXXXX, X.XXXXXX, X.XXXXX, X.XXXXXX" \
          );
        }
      }
      internal_power () {
        when : "XXX&!X";
        related_pg_pin : XXX;
        rise_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "-X.XXXXXXXX, -X.XXXXXXXX, -X.XXXXXXXX, -X.XXXXXXXX, -X.XXXXXXXX, -X.XXXXXXXX, -X.XXXXXXXX, -X.XXXXXXXX" \
          );
        }
        fall_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXXXXX, X.XXXXXXXX, X.XXXXXXXX, X.XXXXXXXX, X.XXXXXXX, X.XXXXXXXX, X.XXXXXXXX, X.XXXXXXX" \
          );
        }
      }
      internal_power () {
        when : "!XXX&X";
        related_pg_pin : XXX;
        rise_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXXX, X.XXXXXX, X.XXXXXX, X.XXXXXX, X.XXXXXX, X.XXXXX, X.XXXXX, X.XXXXX" \
          );
        }
        fall_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXX, X.XXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX" \
          );
        }
      }
      internal_power () {
        when : "!XXX&X";
        related_pg_pin : XXX;
        rise_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXX" \
          );
        }
        fall_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "-X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX" \
          );
        }
      }
      internal_power () {
        when : "!XXX&!X";
        related_pg_pin : XXX;
        rise_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXXX, X.XXXXXX, X.XXXXXX, X.XXXXXX, X.XXXXXX, X.XXXXX, X.XXXXX, X.XXXXX" \
          );
        }
        fall_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX" \
          );
        }
      }
      internal_power () {
        when : "!XXX&!X";
        related_pg_pin : XXX;
        rise_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXXXX, X.XXXXXXX, X.XXXX, X.XXXXXXX, X.XXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXX" \
          );
        }
        fall_power (passive_power_template) {
          index_X ("X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "-X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX" \
          );
        }
      }
    }
    pin (X) {
      direction : "output";
      related_power_pin : "XXX";
      related_ground_pin : "XXX";
      function : "XX";
      power_down_function : "!XXX + XXX + XXX + !XXX";
      min_capacitance : X.XXXXXX;
      related_bias_pin : "XXX XXX";
      max_capacitance : XXX.XXX;
      max_transition : XXX.XXX;
      output_voltage : default_XXX_XXX_output;
      timing () {
        related_pin : "XXX";
        timing_sense : non_unate;
        timing_type : rising_edge;
        cell_rise (delay_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          index_X ("X.XXXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XX.XXX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XX, XXX.XX", \
            "XX.XXXX, XX.XXXX, XX.XXX, XX.XXXX, XXX.XXX, XXX.XX, XXX.XXX, XXX.XXX", \
            "XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "XX.XXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX, XXX.XXX, XXX.XXX" \
          );
        }
        rise_transition (delay_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          index_X ("X.XXXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XX", \
            "X.XXXX, XX.XXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XX", \
            "X.XXXXX, XX.XXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "X.XXXXX, XX.XXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XX, XXX.XXX, XXX.XXX", \
            "X.XXXXX, XX.XXX, XX.XXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XX.XXX, XXX.XXX, XXX.XXX, XXX.XX", \
            "X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XX", \
            "X.XXXXX, XX.XXXX, XX.XXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX" \
          );
        }
        cell_fall (delay_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          index_X ("X.XXXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "XX.XXXX, XX.XXXX, XX.XXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "XX.XXXX, XX.XXX, XX.XXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.X, XXX.XXX", \
            "XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "XX.XXXX, XX.XXXX, XX.XXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX, XXX.XX", \
            "XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX, XXX.XXX, XXX.XXX" \
          );
        }
        fall_transition (delay_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          index_X ("X.XXXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXX, XX.XXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XX", \
            "X.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "X.XXXXX, XX.XXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX", \
            "X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX" \
          );
        }
      }
      internal_power () {
        related_pin : "XXX";
        related_pg_pin : XXX;
        rise_power (power_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          index_X ("X.XXXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX", \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX", \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXX, X.XXXXX, X.XXXXX", \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX", \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX", \
            "X.XXX, X.XXXXX, X.XXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXX, X.XXXXX", \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX", \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX" \
          );
        }
        fall_power (power_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          index_X ("X.XXXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXX, X.XXXX", \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX", \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX", \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX", \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX", \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX", \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXX", \
            "X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX, X.XXXXX" \
          );
        }
      }
      internal_power () {
        related_pin : "XXX";
        related_pg_pin : XXX;
        rise_power (power_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          index_X ("X.XXXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "-X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX", \
            "-X.XXXXXXX, -X.XXXXXXX, -X.XXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX", \
            "-X.XXXXXXX, -X.XXXXXXX, -X.XXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX", \
            "-X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXX, -X.XXXXXXX, -X.XXXXXXX", \
            "-X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXX, -X.XXXXXXX, -X.XXXXXXX", \
            "-X.XXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXX, -X.XXXXXXX", \
            "-X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXX, -X.XXXXXX", \
            "-X.XXXXXXX, -X.XXXXXX, -X.XXXXXXX, -X.XXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX, -X.XXXXXXX" \
          );
        }
        fall_power (power_template) {
          index_X ("X.XXXXX, X.XXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX");
          index_X ("X.XXXXXX, X.XXXXX, XX.XXXX, XX.XXXX, XX.XXXX, XXX.XXX, XXX.XXX, XXX.XXX");
          values ( \
            "X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX", \
            "X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX", \
            "X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXX", \
            "X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX", \
            "X.XXXXXXX, X.XXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXX, X.XXXXXXX", \
            "X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX", \
            "X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXX", \
            "X.XXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXXX, X.XXXXXX, X.XXXXXXX, X.XXXXXXX" \
          );
        }
      }
    }
    ff (XX,XXX) {
      clocked_on : "XXX";
      next_state : "X";
    }
  }
